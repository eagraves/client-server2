Usage: Run the "make" command, then start the server, followed by up to 2 clients
	./server [port]
	./server 4845

	./client [hostname] [port]
	./client 192.168.0.2 4845
	
	./client [hostname] [port]
	./client 192.168.0.2 4845	
	
	Much like program 1, the server side of the program is launched (before the client)  on a specific port entered as a command line argument. At this point the server will start listening on that port, polling using the select() function rather than simply blocking at accept(). The result is the same for a single client, but when multiple clients attempt to connect, this method allows them to  simultaneous interact with the server. (A limit of 2 servers is imposed by the NUM_THREADS definition, but this could easily be increased). The simultaneous connection is achieved by creating an additional thread for every new connection. This way, when a connection has been established and it blocks at recv() waiting for data, only that thread is blocked, and the other threads can continue to operate—the server's thread can accept more connections and the threads for those clients can service them without waiting. Every time the server receives a valid string, it encrypts it and sends it back to the client using the same recv() file descriptor. Each connection thread in the server loops and blocks at recv() until it receives any string without an integer encryption value (the client enforces that this is only sent when the client user intends to quit).

	The client is not changed substantially from program 1. It still takes at the command line the IP address of the server and its port number. It them creates a socket and connects to the server based on this information. It then loops, accepting strings and encryption values from the client. This loop is broken only when the user enters “quit” with either no encryption value or a negative one. “quit” followed by a positive number will encrypt the string normally without exiting. Any other string that is not followed by an integer encryption value will be met with an error message and a chance to renter the two values.
	The client is different this time in that it stays open until the “quit” command is entered. It also has to have the recv() function this time, in order to receive back the now encrypted string it sent and print it to the console. Quitting will bypass blocking here, since the server never sends any acknowledgment that the client is quitting. As soon as the client exits the while loop (only through the “quit” command) it closes the socket it was connected on.
